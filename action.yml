name: 'CapRover action'
description: 'Deploy to caprover server with complete flexibility'
author: 'Hazeezet'

branding:
    icon: upload-cloud
    color: yellow

inputs:

    server:
        description: 'CapRover admin panel URL. Example: https://root.domain.com'
        required: true
        
    app-token:
        description: 'CapRover app token.'
        required: true

    app-name:
        description: 'Application name on the CapRover server. Your app must exists.'
        required: true

    registry-host:
        description: 'Your docker registry url Example: registry.gitlab.com/username/caprover-docker-images. this is used to store image temporarily before deploying'
        required: false
        default: ''

    registry-user:
        description: 'Docker registry token.'
        required: false
        default: ''

    registry-token:
        description: 'Docker registry token.'
        required: false
        default: ''

    registry-name:
        description: 'Registry server to deploy to, only AWS and caprover registry is currently supported'
        required: false
        default: 'caprover'

    aws-account-id:
        description: 'Your AWS account ID'
        required: false
        default: ''

    aws-access-key-id:
        description: 'Your AWS access key'
        required: false
        default: ''

    aws-secret-access-key:
        description: 'Your AWS secret access key'
        required: false
        default: ''

    aws-region:
        description: 'Your AWS region of the registry'
        required: false
        default: ''

    caprover-password:
        description: 'your caprover password, set this if you are deploying image to AWS, https://github.com/caprover/caprover/issues/1476'
        required: false
        default: ''

    plain:
        description: 'If you are deploying plain files'
        required: false
        default: false

    tarfile:
        description: 'If you are deploying tar file'
        required: false
        default: false
    
    branch:
        description: 'If you are deploying plain files then set the branch name to deploy'
        required: false
        default: main

    content:
        description: 'Project folder path or tar file to use to create the image or upload'
        required: false
        default: ''

    dockerfile:
        description: 'Docker file path of your project'
        required: false
        default: ''

    image-name:
        description: 'Image name in your registry'
        required: false
        default: ''

    image-tag:
        description: 'New image tag'
        required: false
        default: latest

runs:
    using: composite
    steps:
        -   name: Login to caprover Docker registry
            if: ${{ inputs.plain == 'false' && inputs.tarfile == 'false' && inputs.registry-name == 'caprover' }}
            uses: docker/login-action@v2
            with:
                registry: ${{ inputs.registry-host }}
                username: ${{ inputs.registry-user }}
                password: ${{ inputs.registry-token }}

        -   name: Install AWS CLI
            if: ${{ inputs.plain == 'false' && inputs.tarfile == 'false' && inputs.registry-name == 'AWS' }}
            run:    |
                sudo apt-get update
                sudo apt-get install -y python3 python3-pip coreutils bash
                pip3 install pyyaml==5.3.1
                pip3 install -U awscli
                sudo apt-get remove --purge -y python3-pip
                sudo apt-get autoremove -y
                sudo rm -rf /var/lib/apt/lists/*
                export AWS_ACCESS_KEY_ID=${{ inputs.aws-access-key-id }}
                export AWS_SECRET_ACCESS_KEY=${{ inputs.aws-secret-access-key }}
                export AWS_DEFAULT_REGION=${{ inputs.aws-region }}
            shell: bash
            
        -   name: Get AWS registry token
            if: ${{ inputs.plain == 'false' && inputs.tarfile == 'false' && inputs.registry-name == 'AWS' }}
            id: registry-password
            run:    |
                echo "REGISTRY-TOKEN=aws ecr get-login-password --region ${{ inputs.aws-region }}" >> $GITHUB_OUTPUT
            shell: bash

        -   name: Login to AWS Docker registry
            if: ${{ inputs.plain == 'false' && inputs.tarfile == 'false' && inputs.registry-name == 'AWS' }}
            uses: docker/login-action@v2
            with:
                registry: ${{ inputs.aws-account-id }}.dkr.ecr.${{ inputs.aws-region }}.amazonaws.com
                username: ${{ inputs.aws-access-key-id }}
                password: ${{ inputs.aws-secret-access-key }}

        -   name: setting image name for caprover registry
            if: ${{ inputs.plain == 'false' && inputs.tarfile == 'false' && inputs.registry-name == 'caprover' }}
            id: image-tag
            run:    |
                echo "IMAGE=${{ inputs.registry-host }}/${{ inputs.registry-user }}/${{ inputs.image-name}}:${{ inputs.image-tag }}" >> $GITHUB_OUTPUT
            shell: bash

        -   name: setting image name for AWS registry
            if: ${{ inputs.plain == 'false' && inputs.tarfile == 'false' && inputs.registry-name == 'AWS' }}
            id: aws-image-tag
            run:    |
                echo "IMAGE=${{ inputs.aws-account-id }}.dkr.ecr.${{ inputs.aws-region }}.amazonaws.com/${{ inputs.image-name }}:${{ inputs.image-tag }}" >> $GITHUB_OUTPUT
            shell: bash
            
        -   name: Set up Docker Buildx
            if: ${{ inputs.plain == 'false' && inputs.tarfile == 'false' }}
            uses: docker/setup-buildx-action@v2

        -   name: Build and push to caprover
            if: ${{ inputs.plain == 'false' && inputs.tarfile == 'false' && inputs.registry-name == 'caprover' }}
            uses: docker/build-push-action@v3
            with:
                context: ${{ inputs.content }}
                file: ${{ inputs.dockerfile }}
                push: true
                tags: ${{ steps.image-tag.outputs.IMAGE }}

        -   name: Build and push image to AWS
            if: ${{ inputs.plain == 'false' && inputs.tarfile == 'false' && inputs.registry-name == 'AWS' }}
            run: |
                docker build -t ${{ steps.aws-image-tag.outputs.IMAGE }} -f ${{ inputs.dockerfile }} ${{ inputs.content }}
                docker push ${{ steps.aws-image-tag.outputs.IMAGE }}
            shell: bash

        -   name: Setting registry token to caprover (https://github.com/caprover/caprover/issues/1476)
            if: ${{ inputs.plain == 'false' && inputs.tarfile == 'false' && inputs.registry-name == 'AWS' }}
            run: |
                echo "Logging in to CapRover"
                CAPROVER_URL=https://captain.${{ inputs.server }}
                TOKEN=$(curl -s -X POST "${CAPROVER_URL}/api/v2/login" \
                  -H "Referer: ${CAPROVER_URL}/" \
                  -H 'Accept: application/json' \
                  -H 'Content-Type: application/json' \
                  -H 'x-namespace: captain' \
                  --data "{\"password\":\"${{ inputs.caprover-password }}\"}" | jq -r '.data.token')
                  
                echo "Find ECR registry"
                REGISTRY_JSON=$(curl -s "${CAPROVER_URL}/api/v2/user/registries" \
                  -H "x-captain-auth: ${TOKEN}" \
                  -H 'x-namespace: captain' | jq .data.registries | jq '.[] | select(.registryUser | contains("AWS"))' | jq --arg V "${{ steps.registry-password.outputs.REGISTRY-TOKEN }}" '.registryPassword = $V')
                 
                echo "Update ECR password"
                curl -s -X POST "${CAPROVER_URL}/api/v2/user/registries/update" \
                  -H "x-captain-auth: ${TOKEN}" \
                  -H 'Content-Type: application/json' \
                  -H 'x-namespace: captain' --data "${REGISTRY_JSON}"
            shell: bash

        -   name: deploying caprover image to caprover
            if: ${{ inputs.plain == 'false' && inputs.tarfile == 'false' && inputs.registry-name == 'caprover' }}
            run: |
                echo "Deploying image to CapRover..."
                docker run caprover/cli-caprover:latest caprover deploy --host ${{inputs.server}} --appToken ${{inputs.app-token}} --appName ${{inputs.app-name}} --imageName ${{ steps.image-tag.outputs.IMAGE }}
            shell: bash

        -   name: deploying AWS image to caprover
            if: ${{ inputs.plain == 'false' && inputs.tarfile == 'false' && inputs.registry-name == 'AWS' }}
            run: |
                echo "Deploying image to CapRover..."
                docker run caprover/cli-caprover:latest caprover deploy --host ${{inputs.server}} --appToken ${{inputs.app-token}} --appName ${{inputs.app-name}} --imageName ${{ steps.aws-image-tag.outputs.IMAGE }}
            shell: bash   

        -   name: using node 22
            if: ${{ inputs.plain == 'true' || inputs.tarfile == 'true' }}
            uses: actions/setup-node@v3
            with:
                node-version: 22

        -   name: installing caprover
            if: ${{ inputs.plain == 'true' || inputs.tarfile == 'true' }}
            run: npm i -g caprover
            shell: bash

        -   name: deploying plain files to caprover
            if: ${{ inputs.plain == 'true' && inputs.tarfile == 'false' }}
            run: |
                echo "Deploying plain files to CapRover..."
                caprover deploy --host ${{inputs.server}} --appToken ${{inputs.app-token}} --appName ${{inputs.app-name}} --branch ${{inputs.branch}}
            shell: bash

        -   name: deploying tar file to caprover
            if: ${{ inputs.tarfile == 'true' && inputs.plain == 'false' }}
            run: |
                echo "Deploying tar file to CapRover..."
                caprover deploy --host ${{inputs.server}} --appToken ${{inputs.app-token}} --appName ${{inputs.app-name}} --tarFile ${{ inputs.content }}
            shell: bash
